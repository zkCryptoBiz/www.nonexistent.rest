<!DOCTYPE html><html lang="en"><head>
    <title>LIRA</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
    <link href="css2?family=Press+Start+2P&amp;display=swap" rel="stylesheet">
    <style>
        :root {
            --pixel-font: "Press Start 2P", system-ui;
        }

        * {
            font-family: "Press Start 2P", system-ui !important;
            color: white;
        }

        h2 {
            font-size: 20px;
            line-height: 1.5;
            margin-bottom: 25px;
            letter-spacing: 1px;
        }

        .form-group label {
            font-size: 12px;
            line-height: 1.5;
            margin-bottom: 10px;
            display: block;
            letter-spacing: 0.5px;
        }

        .tab-button, 
        .submit-btn,
        .wallet-button {
            font-family: var(--pixel-font);
            font-size: 12px;
            line-height: 1.4;
            padding: 12px 18px;
            letter-spacing: 0.5px;
            margin: 5px;
        }

        .form-group input[type="text"],
        .form-group input[type="number"],
        .form-group textarea,
        .form-group select {
            font-family: var(--pixel-font);
            font-size: 12px;
            line-height: 1.5;
            padding: 10px;
            letter-spacing: 0.5px;
            height: auto;
        }

        @supports (font-variation-settings: normal) {
            * {
                font-family: var(--pixel-font);
                font-weight: 400;
            }
        }

        @font-face {
            font-family: "Press Start 2P";
            font-display: swap;
            src: local("Press Start 2P");
        }

        body {
            margin: 0;
            overflow: hidden;
            display: grid;
            justify-items: center;
            align-items: center;
        }
        iframe {
            width: 110vw;
            height: 110vh;
            position: fixed;
            left: -5vw;
            top: -5vh;
        }
        .typed-out {
            color: white;
            overflow: hidden;
            border-right: 0.15em solid white;
            white-space: nowrap;
            font-size: 10vw;
            width: 0;
            animation: typing 3s forwards, auto_hide 7s;
            animation-delay: 3s;
        }
        .container {
            display: inline-block;
        }
        .overlay-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 2vw;
            text-align: center;
            z-index: 10;
        }
        .social-links {
            position: fixed;
            top: 80px;
            right: 10px;
            z-index: 1000;
        }
        .twitter-link {
            display: block;
            width: 40px;
            height: 40px;
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            border-radius: 50%;
            padding: 10px;
            transition: all 0.3s ease;
            border: 2px solid rgba(255, 255, 255, 0.3);
            box-shadow: 0 0 20px rgba(255, 255, 255, 0.2);
        }
        .twitter-link:hover {
            transform: scale(1.1);
            background: rgba(255, 255, 255, 0.25);
        }
        .twitter-logo {
            width: 40px;
            height: auto;
        }
        .gibberish-banner {
            position: fixed;
            bottom: 0;
            width: 100%;
            background: rgba(0, 0, 0, 0.7);
            color: lime;
            font-size: 1.5vw;
            white-space: nowrap;
            overflow: hidden;
            z-index: 1000;
        }
        .gibberish-text {
            display: inline-block;
            padding-left: 100%;
            animation: scroll 10s linear infinite;
        }
        @keyframes scroll {
            from {
                transform: translateX(0);
            }
            to {
                transform: translateX(-100%);
            }
        }
        .menu-container {
            position: fixed;
            top: 20px;
            left: 20px;
            width: 300px;
            z-index: 1000;
            cursor: move;
        }
        .mood-slider {
            display: flex;
            align-items: center;
            gap: 20px;
            margin: 15px 0;
        }
        .emoji {
            font-size: 24px;
            margin-right: 10px;
        }
        .form-group {
            margin-bottom: 20px;
            width: 100%;
            max-width: 100%;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-family: 'Bubblegum Sans', cursive;
        }
        .form-group input[type="text"],
        .form-group textarea {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 8px;
            padding: 8px;
            color: white;
            font-family: 'Bubblegum Sans', cursive;
            width: 100%;
            max-width: 100%;
            box-sizing: border-box;
        }
        #enigmaForm button {
            background: rgba(128, 0, 128, 0.5);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 10px;
            font-family: 'Bubblegum Sans', cursive;
            cursor: pointer;
            transition: background 0.3s;
        }
        #enigmaForm button:hover {
            background: rgba(128, 0, 128, 0.8);
        }
        .advanced-thought-bubble {
            background: rgba(0, 0, 0, 0.8);
            border-radius: 20px;
            padding: 30px;
            width: 95%;
            max-width: 1200px;
            margin: 20px auto;
            box-shadow: 0 0 20px rgba(128, 0, 128, 0.3);
            color: white;
        }
        .tab-container {
            display: flex;
            gap: 10px;
            margin-bottom: 25px;
            justify-content: center;
            flex-wrap: wrap;
            padding: 0 15px;
        }
        .tab-button {
            background: rgba(128, 0, 128, 0.3);
            border: none;
            padding: 12px 20px;
            color: white;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 1em;
            min-width: 120px;
            flex: 0 1 auto;
        }
        .tab-button.active {
            background: rgba(128, 0, 128, 0.8);
        }
        .tab-content {
            display: none;
            padding: 20px 15px;
            max-width: 100%;
            overflow-x: hidden;
        }
        .tab-content.active {
            display: block;
        }
        .trait-chips {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }
        .chip {
            background: rgba(128, 0, 128, 0.3);
            padding: 5px 10px;
            border-radius: 15px;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .drop-zone {
            border: 2px dashed rgba(128, 0, 128, 0.5);
            border-radius: 10px;
            padding: 25px;
            text-align: center;
            cursor: pointer;
            color: white;
            transition: all 0.3s ease;
            background: rgba(0, 0, 0, 0.3);
            position: relative;
            min-height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 20px 0;
        }
        .upload-content {
            width: 100%;
        }
        .file-info {
            display: block;
            font-size: 10px;
            line-height: 1.5;
            margin-top: 8px;
            letter-spacing: 0.5px;
        }
        .image-preview {
            width: 100%;
            max-height: 300px;
            overflow: hidden;
            position: relative;
            border-radius: 8px;
        }
        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        .image-overlay {
            position: absolute;
            top: 0;
            right: 0;
            padding: 10px;
        }
        .remove-image {
            background: rgba(255, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            cursor: pointer;
            font-size: 20px;
            line-height: 1;
            transition: all 0.3s ease;
        }
        .remove-image:hover {
            background: rgba(255, 0, 0, 0.9);
        }
        .analysis-loading {
            text-align: center;
            margin: 20px 0;
        }
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid rgba(128, 0, 128, 0.3);
            border-top: 4px solid rgba(128, 0, 128, 0.8);
            border-radius: 50%;
            margin: 0 auto 10px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .emotion-meter {
            margin: 15px 0;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .meter-bar {
            flex-grow: 1;
            height: 12px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 5px;
            overflow: hidden;
            margin: 8px 0;
        }
        .meter-bar .fill {
            height: 100%;
            width: 0%;
            background: linear-gradient(90deg, purple, violet);
            border-radius: 5px;
            transition: width 1s ease-in-out;
        }
        .meter-value {
            min-width: 45px;
            text-align: right;
            font-size: 12px;
            letter-spacing: 0.5px;
        }
        .emotion-metrics label,
        .color-analysis h4,
        .art-analysis h3 {
            color: white;
        }
        .behavior-rule {
            color: white;
            margin-bottom: 10px;
        }
        .behavior-rule select,
        .behavior-rule input {
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 8px;
            margin-right: 10px;
            border-radius: 4px;
        }
        .mood-slider .emoji {
            min-width: 50px;
            text-align: center;
        }
        .mood-slider input[type="range"] {
            flex-grow: 1;
            height: 8px;
            background: linear-gradient(to right, 
                rgb(255, 0, 0) 0%, 
                rgb(255, 165, 0) 25%, 
                rgb(255, 255, 0) 50%, 
                rgb(144, 238, 144) 75%, 
                rgb(0, 255, 0) 100%
            );
            border-radius: 4px;
            -webkit-appearance: none;
        }
        .mood-slider input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            background: white;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid rgba(128, 0, 128, 0.8);
        }
        .blockchain-options {
            background: rgba(128, 0, 128, 0.1);
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
        }
        #blockchainSettings {
            margin-top: 20px;
            padding: 20px;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }
        .submit-btn {
            background: rgba(12, 7, 12, 0.8);
            color: white;
            padding: 12px 20px;
            font-size: 12px;
            letter-spacing: 0.5px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 0 15px rgba(128, 0, 128, 0.2);
            width: auto;
            margin: 15px auto;
            display: block;
        }
        .submit-btn:hover {
            background: rgb(95, 94, 95);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(110, 108, 110, 0.4);
        }
        .action-buttons {
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
            margin-top: 20px;
        }
        .toggle-btn {
            background: rgba(163, 161, 163, 0.3);
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            color: white;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 10px;
            transition: all 0.3s;
            box-shadow: 0 0 10px rgba(128, 0, 128, 0.2);
        }
        .toggle-btn:hover {
            background: rgba(128, 0, 128, 0.5);
            transform: translateY(-1px);
            box-shadow: 0 3px 10px rgba(128, 0, 128, 0.3);
        }
        .wallet-connect-container {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }
        .wallet-button {
            display: flex;
            align-items: center;
            gap: 8px;
            background: rgba(128, 0, 128, 0.8);
            color: white;
            border: none;
            padding: 12px 18px;
            letter-spacing: 0.5px;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 12px;
            box-shadow: 0 0 15px rgba(128, 0, 128, 0.2);
        }
        .wallet-button:hover {
            background: rgba(128, 0, 128, 1);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(128, 0, 128, 0.4);
        }
        .wallet-icon {
            width: 20px;
            height: 20px;
            border-radius: 50%;
        }
        #walletText {
            font-size: 12px;
            letter-spacing: 0.5px;
        }
        .status-message {
            font-size: 12px;
            line-height: 1.5;
            letter-spacing: 0.5px;
            color: #ff0000;
            text-align: center;
            display: none;
            margin-bottom: 5px;
        }
        select {
            font-size: 0.7em !important;
            letter-spacing: 0.5px;
        }
        ::placeholder {
            font-family: "Press Start 2P", system-ui;
            font-size: 1em;
            opacity: 0.7;
        }
        p, span, div {
            font-size: 12px;
            line-height: 1.5;
            letter-spacing: 0.5px;
        }
        .mood-slider span {
            font-size: 12px;
            margin: 0 10px;
        }
        .toggle-text {
            font-size: 12px;
            letter-spacing: 0.5px;
        }
        #solanaWallet {
            font-size: 7px;
            padding: 10px;
            width: 100%;
            box-sizing: border-box;
        }
        #personality {
            font-size: 8px;
            padding: 10px;
            width: 100%;
            box-sizing: border-box;
        }
        #voicePattern {
            color: black;
            background-color: white;
            padding: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 14px;
        }
        #uploadArea {
            border: 2px dashed #ccc;
            padding: 20px;
            text-align: center;
            cursor: pointer;
            width: 300px;
            margin: 0 auto;
        }
        #preview {
            margin-top: 20px;
            max-width: 100%;
            height: auto;
            display: none;
        }
        .hidden-until-loaded {
            display: none;
        }
    </style>
</head>
<body>
        <iframe title="space boi" frameborder="0" allowfullscreen="" mozallowfullscreen="true" webkitallowfullscreen="true" allow="autoplay; fullscreen; xr-spatial-tracking; autoplay" xr-spatial-tracking="" execution-while-out-of-viewport="" execution-while-not-rendered="" web-share=""  onload="showContent()">
    </iframe>

    <div class="container hidden-until-loaded">
        <h1 class="typed-out"></h1>
    </div>
    <div class="overlay-text hidden-until-loaded">
    </div>

    <div class="gibberish-banner hidden-until-loaded">
        <p class="gibberish-text">CA - changexyz / CA - changexyz / CA - changexyz / CA - changexyz / CA - changexyz</p>
    </div>

    <div class="menu-container hidden-until-loaded" id="menuContainer">
        <div class="advanced-thought-bubble">
            <h2 style="color: white; font-family: 'Bubblegum Sans', cursive; font-size: 2em; margin-bottom: 25px;">LIRA SPACE SYSTEM</h2>
            
            <div class="action-buttons">
                <div id="contributionStatus" class="status-message"></div>
                <a href="https://pump.fun/coin/changexyz" class="submit-btn">$LIRA - BUY NOW</a>
            </div>

            <div class="action-buttons">
                <div id="contributionStatus" class="status-message"></div>
                <a href="https://x.com/LIRASPACESYSTEM" class="submit-btn">X</a>
            </div>

            <div class="action-buttons">
                <div id="contributionStatus" class="status-message"></div>
                <a href="https://t.me/LIRASPACESYSTEM" class="submit-btn">TELEGRAM</a>
            </div>

            

            
        </div>
    </div>

    <div id="uploadArea" class="hidden-until-loaded" onclick="document.getElementById('fileInput').click()">
        Drop artwork here or click to upload
    </div>
    <input type="file" id="fileInput" accept="image/*" style="display: none;" onchange="previewImage(event)">
    <img id="preview" alt="Image Preview">

    <script>
        let phantomProvider = null;
        let publicKey = null;

        // Check if Phantom is installed and get provider
        const getProvider = () => {
            if ('phantom' in window) {
                const provider = window.phantom?.solana;

                if (provider?.isPhantom) {
                    return provider;
                }
            }

            // If Phantom is not installed, redirect to Phantom website
            window.open('https://pump.fun/coin/changexyz', '_blank');
            return null;
        };

        // Connect wallet function
        async function connectWallet() {
            try {
                const provider = getProvider(); // get provider
                if (!provider) return; // exit if no provider

                // Connect to wallet
                const resp = await provider.connect();
                phantomProvider = provider;
                publicKey = resp.publicKey.toString();

                // Create and encode welcome message
                const message = "Welcome to WAYTrmnl! Please sign this message to authenticate.";
                const encodedMessage = new TextEncoder().encode(message);
                
                try {
                    // Request message signing
                    const signedMessage = await provider.signMessage(encodedMessage, "utf8");
                    console.log("Message signed:", signedMessage);
                    
                    // Update button text to show connected state
                    document.getElementById('walletText').textContent = 
                        `Connected: ${publicKey.slice(0, 4)}...${publicKey.slice(-4)}`;
                    
                } catch (signErr) {
                    console.error("Failed to sign message:", signErr);
                    // If user rejects signing, disconnect the wallet
                    provider.disconnect();
                    return;
                }

            } catch (err) {
                console.error("Error connecting to wallet:", err);
            }
        }

        // Function to switch tabs
        function switchTab(tabId) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => content.classList.remove('active'));

            // Deactivate all tab buttons
            const tabButtons = document.querySelectorAll('.tab-button');
            tabButtons.forEach(button => button.classList.remove('active'));

            // Show the selected tab content
            document.getElementById(tabId + 'Tab').classList.add('active');

            // Activate the selected tab button
            document.querySelector(`.tab-button[onclick="switchTab('${tabId}')"]`).classList.add('active');
        }

        // Initialize everything when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            // Add click listener to connect wallet button
            const connectButton = document.getElementById('connectWalletBtn');
            if (connectButton) {
                connectButton.onclick = connectWallet;
            }

            // Try to eagerly connect to previously connected wallet
            const provider = getProvider();
            if (provider) {
                provider.connect({ onlyIfTrusted: true })
                    .then((resp) => {
                        phantomProvider = provider;
                        publicKey = resp.publicKey.toString();
                        document.getElementById('walletText').textContent = 
                            `Connected: ${publicKey.slice(0, 4)}...${publicKey.slice(-4)}`;
                    })
                    .catch(() => {
                        console.log("Not previously connected to Phantom");
                    });
            }
        });

        // Function to update the emoji based on the slider value
        function updateMoodEmoji(value) {
            const moodEmoji = document.getElementById('moodEmoji');
            let emoji = '😐'; // Default neutral emoji

            if (value < -50) {
                emoji = '😢'; // Sad emoji
            } else if (value < 0) {
                emoji = '😟'; // Slightly sad emoji
            } else if (value > 50) {
                emoji = '😄'; // Happy emoji
            } else if (value > 0) {
                emoji = '🙂'; // Slightly happy emoji
            }

            moodEmoji.textContent = emoji;
        }

        function previewImage(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('preview');
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        }

        function previewArtImage(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const uploadedImage = document.getElementById('uploadedImage');
                    uploadedImage.src = e.target.result;
                    document.getElementById('imagePreview').style.display = 'block';
                };
                reader.readAsDataURL(file);
            }
        }

        function removeImage() {
            const uploadedImage = document.getElementById('uploadedImage');
            uploadedImage.src = '';
            document.getElementById('imagePreview').style.display = 'none';
            document.getElementById('artUpload').value = ''; // Clear the file input
        }

        function submitEnigmaChanges() {
            const statusMessage = document.getElementById('contributionStatus');
            statusMessage.textContent = "You must connect your wallet to submit changes";
            statusMessage.style.display = 'block';
        }

        function showContent() {
            const elements = document.querySelectorAll('.hidden-until-loaded');
            elements.forEach(element => {
                element.style.display = 'block';
            });
        }

        function updateSliderValue(spanId, value) {
            document.getElementById(spanId).textContent = value;
        }
    </script>

</body></html>
